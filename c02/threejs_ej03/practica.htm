<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>Custom Conical Mesh with Three.js</title>
    <style>
      body {
        margin: 0;
      }
    </style>
  </head>
  <body>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script>
      // Set up the scene
      const scene = new THREE.Scene();
      const camera = new THREE.PerspectiveCamera(
        75,
        window.innerWidth / window.innerHeight,
        0.1,
        1000
      );

      const renderer = new THREE.WebGLRenderer();
      renderer.setSize(window.innerWidth, window.innerHeight);
      document.body.appendChild(renderer.domElement);

      // Define parameters for the conical mesh
      const radiusTop = 0; // Top radius of the cone
      const radiusBottom = 2; // Bottom radius of the cone
      const height = 3; // Height of the cone
      const radialSegments = 32; // Number of radial segments for the cone
      const heightSegments = 1; // Number of height segments for the cone

      // Create a custom BufferGeometry for the cone
      const geometry = new THREE.BufferGeometry();

      // Create arrays to hold the vertex positions and indices
      const positions = [];
      const indices = [];

      // Create vertices for the cone
      for (let y = 0; y <= heightSegments; y++) {
        const v = y / heightSegments;
        const radius = v * (radiusBottom - radiusTop) + radiusTop;
        for (let x = 0; x <= radialSegments; x++) {
          const u = x / radialSegments;
          const theta = u * 2 * Math.PI;
          const xCoord = radius * Math.sin(theta);
          const yCoord = -v * height + height / 2;
          const zCoord = radius * Math.cos(theta);

          positions.push(xCoord, yCoord, zCoord);
        }
      }

      // Create faces for the cone
      for (let i = 0; i < heightSegments; i++) {
        for (let j = 0; j < radialSegments; j++) {
          const a = i * (radialSegments + 1) + j;
          const b = a + radialSegments + 1;
          const c = a + 1;
          const d = b + 1;

          indices.push(a, b, c);
          indices.push(b, d, c);
        }
      }

      // Create Float32Arrays from the arrays
      const positionsArray = new Float32Array(positions);
      const indicesArray = new Uint16Array(indices);

      // Add positions and indices to the BufferGeometry
      geometry.setAttribute(
        "position",
        new THREE.BufferAttribute(positionsArray, 3)
      );
      geometry.setIndex(new THREE.BufferAttribute(indicesArray, 1));

      // Create the mesh
      const customMesh = new THREE.Mesh(geometry, material);
      scene.add(customMesh);

	  const loader = new THREE.TextureLoader();
	  const texture =loader.load("C:\Users\Estudiante\Documents\threejs_ej02\mimikyu");
	  texture.colorSpace = THREE.SRGBColorSpace;
	  
	  // Create a material
      const material = new THREE.MeshBasicMaterial({
        color: 0xff8844,
        map: texture,
      });

      // Set camera position
      camera.position.z = 5;
	
	  let vrotacion = 0.05;
	  let isrotating = false;
	  
	  document.addEventListener("keydown", (event) => {
		if (event.key === "ArrowRight"){
		isrotating = true;
		} else if (event.key === "ArrowLeft"){
		isrotating = false;
		}
		
	  
      // Animation loop
		const animate = () => {
        requestAnimationFrame(animate);

        // Rotate the cone
        if(isrotating){
		customMesh.x += vrotacion;
		customMesh.y += vrotacion;
		}}

        renderer.render(scene, camera);
      };

      animate();
    </script>
  </body>
</html>


